---
description: captures important patterns, preferences, and project intelligence, living document that grows smarter as progress happens
globs: 
alwaysApply: false
---
---
description: Stores important patterns, preferences, and project intelligence, living document that grows smarter as progress happens
globs: 
alwaysApply: true
---

# Lessons Learned for TagMap

This document captures important patterns, preferences, and project intelligence for the TagMap application. It serves as a living document that evolves as development progresses.

## Development Patterns

### Architecture Patterns

- Client-server architecture with clear separation of concerns
- RESTful API design following resource-oriented principles
- Component-based frontend with Vue.js
- Geospatial data handling with GeoDjango and PostGIS

### Code Organization

- Django models organized by functional domain (authentication, plans, etc.)
- Vue components follow feature-based organization
- Reusable components kept separate from page-specific components

## Technical Insights

### GeoDjango & PostGIS

- Use spatial indexing for query performance
- Store geometry data in appropriate format (Point, LineString, Polygon)
- Use proper SRID for accurate calculations
- Consider performance implications of complex spatial queries

### Leaflet Integration

- Use custom controls for better user experience
- Implement layer groups for organized map layers
- Optimize rendering for mobile devices
- Consider memory usage when handling large datasets

## User Experience Preferences

- Responsive design adapting to different screen sizes
- Clear visual hierarchy of interface elements
- Intuitive map controls with minimal learning curve
- Consistent visual language throughout the application

## Project Management Insights

- Documentation-first approach to ensure clarity and alignment
- Test-driven development for critical components
- Feature-based organization of tasks
- Phased development approach

## UI Improvements

- Replaced default Note tool icon with map pin SVG to better represent geolocation and improve UX
- Enhanced Note icon with a circle underneath to create a drop pin effect, improving visual metaphor and recognition
- Improved visibility of the drop pin shadow with increased size and subtle fill for better distinction

## Map Integration

### Google Maps Integration
- **Dynamic API Loading**: For third-party services like Google Maps, we prefer dynamic loading over static script tags to improve initial page load performance and handle failures gracefully.
- **API Key Security**: Google Maps API keys should be managed centrally in configuration files, not hardcoded in multiple places.
- **Fallback Strategy**: Always implement a fallback strategy for external services. For maps, we default to IGN layer when Google Maps fails to load.
- **Layer Structure**: Layer management in Leaflet works best with a layerGroup approach, even for single layers, as it provides consistency across different map providers.

### Performance Optimization
- **Monitoring Performance**: The project uses a custom performance monitoring system (`usePerformanceMonitor`) to track and optimize critical operations.
- **Async Layer Management**: Map layer changes are handled asynchronously with careful state management to prevent UI glitches.
- **Error Handling**: Robust error handling is essential for map operations, with multiple recovery attempts before falling back.

## Frontend Architecture

### Vue.js Patterns
- **Composables Pattern**: The project uses Vue 3 composables (like `useMapState`) for reusable stateful logic.
- **Configuration Files**: External services and configuration values should be centralized in the `config/` directory.
- **Utils Structure**: Utilities that handle external services are placed in the `utils/` directory.

## Tools and Libraries

### Leaflet Extensions
- **Plugin Integration**: When integrating Leaflet plugins (like GoogleMutant), careful type handling is required due to TypeScript limitations.
- **CSS and Styling**: Custom map controls and elements should follow the established styling patterns for consistency.

## Development Practices

### Documentation 
- **Task Documentation**: Significant feature implementations should be documented in both code comments and dedicated documentation files.
- **API Key Management**: Instructions for obtaining and configuring API keys should be clearly documented for other developers.

### Error Handling
- **Graceful Degradation**: The application should gracefully handle service failures, particularly for map layer services.
- **User Experience**: Error states should be handled without breaking the user experience or requiring page refreshes.

## [2024-06-XX] Robustesse d'affichage des entités Leaflet personnalisées

### Contexte
- Les entités interactives Leaflet (notamment les icônes personnalisées comme GeoNote) peuvent disparaître du DOM ou devenir invisibles malgré des propriétés CSS correctes, surtout après des interactions complexes (survol, zoom, déplacement, etc.).

### Leçon
- Toujours vérifier la visibilité réelle (taille, présence dans le DOM) des éléments interactifs après chaque interaction critique.
- Prévoir une méthode de recréation dynamique de l'icône ou de l'élément DOM si celui-ci disparaît ou devient invisible (forceVisible, recreateIcon).
- Appliquer des styles CSS globaux et explicites pour garantir la visibilité, en complément des classes Leaflet.
- Utiliser des logs détaillés pour faciliter le debug et la compréhension des problèmes d'affichage frontend.
- Ne pas bloquer les interactions multiples : permettre le survol et la sélection d'une entité même lorsqu'une autre est déjà sélectionnée, en évitant les conditions restrictives (comme `if (layer && !selectedShape.value)`) qui empêchent la navigation fluide entre les éléments cartographiques.

### Impact
- Cette approche garantit une expérience utilisateur robuste et évite les bugs d'affichage difficiles à diagnostiquer, en particulier sur des stacks frontend riches en interactions (Leaflet, plugins, etc.).

This document will be updated continuously as development progresses and new insights are gained.
